JMM内存模型是共享内存的并发模型，线程之间主要通过读写共享变量来完成隐式通信。

问题：多线程共享同一个变量时，会出现脏读。
解决办法：
1. 通过同步机制（控制不同线程操作发生的相对顺序）；
2. 通过Volatile关键字，使得每次volatile的变量被修改后能够强制刷新到主存，从而对每个线程都是可见的；

***********************************************************************
重排序：
当CPU的计算速度远远超过访问Cache的速度时，就会产生Cache wait，过多的Cache wati就会造成性能瓶颈。
为提高程序执行性能，编译器和处理器常常会对指令进行重排序。

源代码 -》1.编译器优化重排序 -》2.处理器-指令重排序 -》3.处理器-存储子系统重排序 -》最终执行的指令序列

编译期重排序：
java中由javac（静态编译器）和JIT（动态编译器），其中javac是将.java文件编译为.class字节码文件，
而JIT是将字节码文件编译为宿主机器上的机器码；javac几乎不对指令重排序，但JIT会依据对上下文的分析，
对指令进行重排序，使之更适合于CPU的并行执行。

运行期重排序（CPU指令重排序）：
CPU在执行过程中，动态分析依赖部件的效能，对机器指令做重排序优化，最大限度发挥机器性能。
执行指令时，哪一条指令准备好就先执行哪一条（例如指令所需的操作数准备好了），指令执行的结果会先写入重排序缓冲器，
重排序缓冲器会将结果按照指令写入处理器的顺序排序，然后写入主内存。
现代处理器乱序执行还采用了另一个策略：猜测执行。例如对于一个if语句，处理器可能会先执行if方法体的指令，
再检查条件是否成立，如条件成立，则将方法体内的指令执行结果写入缓存，否则抛弃。

存储子系统重排序：
存储子系统（写缓存和高速缓存器）重排序，是指对指令执行结果的重排序。例如两条指令s1和s2在被处理器执行完成后，
结果被按s1 s2的顺序写入写缓存器中，但是写缓存器为提高性能，并不一定按此顺序写入高速缓存，即不保证first in first out。

重排序机制，是牺牲内存的一致性来换取CPU性能。对单线程没有影响。
多线程环境下共享变量，就会产生线程安全问题，如何解决？
引入内存屏障（Memory Barrier），它是CPU的一个指令，通过阻止屏障两边的指令重排序，来避免编译器和硬件的不正确优化。
插入一个内存屏障，相当于告诉编译器和CPU，先于这个命令的必须先执行，后于这个命令的必须后执行；
另一个作用是强制更新一次CPU缓存，例如一个写屏障，会把这个屏障前写入的数据刷新到主存，这样任何试图读取该数据的线程都将得到最新值。

硬件层的内存屏障：
Intel硬件提供了一系列的内存屏障，主要有：
1. lfence，是一种Load Barrier 读屏障
2. sfence, 是一种Store Barrier 写屏障
3. mfence, 是一种全能型的屏障，具备ifence和sfence的能力
4. Lock前缀，Lock不是一种内存屏障，但是它能完成类似内存屏障的功能。Lock会对CPU总线和高速缓存加锁，可以理解为CPU指令级的一种锁。
它后面可以跟ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG等指令。

内存屏障的实现：
不同硬件实现内存屏障的方式不同，Java内存模型屏蔽了这种底层硬件平台的差异，由JVM来为不同的平台生成相应的机器码。
Java内存屏障主要有Load和Store两类。
对Load Barrier来说，在读指令前插入读屏障，可以让高速缓存中的数据失效，重新从主内存加载数据
对Store Barrier来说，在写指令之后插入写屏障，能让写入缓存的最新数据写回到主内存

对于Load和Store，在实际使用中，又分为以下四种：
LoadLoad 屏障
序列：Load1,Loadload,Load2
StoreStore 屏障
序列：Store1，StoreStore，Store2
LoadStore 屏障
序列： Load1; LoadStore; Store2
StoreLoad 屏障
序列: Store1; StoreLoad; Load2


************************************************
JMM通过happen-before关系向程序员提供跨线程的内存可见性保证。
JMM的8条happen-before规则：
(1)单线程happen-before原则：在同一个线程中，书写在前面的操作happen-before后面的操作。
(2)锁的happen-before原则：同一个锁的unlock操作happen-before此锁的lock操作。
(3)volatile的happen-before原则：对一个volatile变量的写操作happen-before对此变量的任意操作(当然也包括写操作了)。
(4)happen-before的传递性原则：如果A操作 happen-before B操作，B操作happen-before C操作，那么A操作happen-before C操作。
(5)线程启动的happen-before原则：同一个线程的start方法happen-before此线程的其它方法。
(6)线程中断的happen-before原则：对线程interrupt方法的调用happen-before被中断线程的检测到中断发送的代码。
(7)线程终结的happen-before原则：线程中的所有操作都happen-before线程的终止检测。
(8)对象创建的happen-before原则：一个对象的初始化完成先于他的finalize方法调用。


